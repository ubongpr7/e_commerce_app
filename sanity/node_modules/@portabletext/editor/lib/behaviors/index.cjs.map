{"version":3,"file":"index.cjs","sources":["../../src/behaviors/behavior.code-editor.ts","../../src/behaviors/behavior.emoji-picker.ts","../../src/internal-utils/looks-like-url.ts","../../src/behaviors/behavior.links.ts"],"sourcesContent":["import {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * @beta\n */\nexport type CodeEditorBehaviorsConfig = {\n  moveBlockUpShortcut: string\n  moveBlockDownShortcut: string\n}\n\n/**\n * @beta\n */\nexport function createCodeEditorBehaviors(config: CodeEditorBehaviorsConfig) {\n  return [\n    defineBehavior({\n      on: 'keyboard.keydown',\n      guard: ({snapshot, event}) => {\n        const isMoveUpShortcut = isHotkey(\n          config.moveBlockUpShortcut,\n          event.originEvent,\n        )\n        const firstBlock = selectors.getFirstBlock(snapshot)\n        const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n        const blocksAbove =\n          firstBlock?.node._key !== selectedBlocks[0]?.node._key\n\n        if (!isMoveUpShortcut || !blocksAbove) {\n          return false\n        }\n\n        return {paths: selectedBlocks.map((block) => block.path)}\n      },\n      actions: [\n        (_, {paths}) =>\n          paths.map((at) =>\n            raise({\n              type: 'move.block up',\n              at,\n            }),\n          ),\n      ],\n    }),\n    defineBehavior({\n      on: 'keyboard.keydown',\n      guard: ({snapshot, event}) => {\n        const isMoveDownShortcut = isHotkey(\n          config.moveBlockDownShortcut,\n          event.originEvent,\n        )\n        const lastBlock = selectors.getLastBlock(snapshot)\n        const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n        const blocksBelow =\n          lastBlock?.node._key !==\n          selectedBlocks[selectedBlocks.length - 1]?.node._key\n\n        if (!isMoveDownShortcut || !blocksBelow) {\n          return false\n        }\n\n        return {paths: selectedBlocks.map((block) => block.path).reverse()}\n      },\n      actions: [\n        (_, {paths}) =>\n          paths.map((at) =>\n            raise({\n              type: 'move.block down',\n              at,\n            }),\n          ),\n      ],\n    }),\n  ]\n}\n","import {assertEvent, assign, createActor, setup} from 'xstate'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {effect, execute, noop} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst emojiCharRegEx = /^[a-zA-Z-_0-9]{1}$/\nconst incompleteEmojiRegEx = /:([a-zA-Z-_0-9]+)$/\nconst emojiRegEx = /:([a-zA-Z-_0-9]+):$/\n\n/**\n * @beta\n */\nexport type EmojiPickerBehaviorsConfig<TEmojiMatch> = {\n  /**\n   * Match emojis by keyword.\n   */\n  matchEmojis: ({keyword}: {keyword: string}) => Array<TEmojiMatch>\n  onMatchesChanged: ({matches}: {matches: Array<TEmojiMatch>}) => void\n  onSelectedIndexChanged: ({selectedIndex}: {selectedIndex: number}) => void\n  /**\n   * Parse an emoji match to a string that will be inserted into the editor.\n   */\n  parseMatch: ({match}: {match: TEmojiMatch}) => string | undefined\n}\n\n/**\n * @beta\n */\nexport function createEmojiPickerBehaviors<TEmojiMatch>(\n  config: EmojiPickerBehaviorsConfig<TEmojiMatch>,\n) {\n  const emojiPickerActor = createActor(createEmojiPickerMachine<TEmojiMatch>())\n  emojiPickerActor.start()\n  emojiPickerActor.subscribe((state) => {\n    config.onMatchesChanged({matches: state.context.matches})\n    config.onSelectedIndexChanged({selectedIndex: state.context.selectedIndex})\n  })\n\n  return [\n    defineBehavior({\n      on: 'insert.text',\n      guard: ({snapshot, event}) => {\n        if (event.text === ':') {\n          return false\n        }\n\n        const isEmojiChar = emojiCharRegEx.test(event.text)\n\n        if (!isEmojiChar) {\n          return {emojis: []}\n        }\n\n        const focusBlock = selectors.getFocusTextBlock(snapshot)\n        const textBefore = selectors.getBlockTextBefore(snapshot)\n        const emojiKeyword = `${textBefore}${event.text}`.match(\n          incompleteEmojiRegEx,\n        )?.[1]\n\n        if (!focusBlock || emojiKeyword === undefined) {\n          return {emojis: []}\n        }\n\n        const emojis = config.matchEmojis({keyword: emojiKeyword})\n\n        return {emojis}\n      },\n      actions: [\n        (_, params) => [\n          {\n            type: 'effect',\n            effect: () => {\n              emojiPickerActor.send({\n                type: 'emojis found',\n                matches: params.emojis,\n              })\n            },\n          },\n        ],\n      ],\n    }),\n    defineBehavior({\n      on: 'insert.text',\n      guard: ({snapshot, event}) => {\n        const isColon = event.text === ':'\n\n        if (!isColon) {\n          return false\n        }\n\n        const matches = emojiPickerActor.getSnapshot().context.matches\n        const selectedIndex =\n          emojiPickerActor.getSnapshot().context.selectedIndex\n        const emoji = matches[selectedIndex]\n          ? config.parseMatch({match: matches[selectedIndex]})\n          : undefined\n\n        const focusBlock = selectors.getFocusTextBlock(snapshot)\n        const textBefore = selectors.getBlockTextBefore(snapshot)\n        const emojiKeyword = `${textBefore}:`.match(emojiRegEx)?.[1]\n\n        if (!focusBlock || emojiKeyword === undefined) {\n          return false\n        }\n\n        const emojiStringLength = emojiKeyword.length + 2\n\n        if (emoji) {\n          return {\n            focusBlock,\n            emoji,\n            emojiStringLength,\n            textBeforeLength: textBefore.length + 1,\n          }\n        }\n\n        return false\n      },\n      actions: [\n        () => [\n          execute({\n            type: 'insert.text',\n            text: ':',\n          }),\n        ],\n        (_, params) => [\n          effect(() => {\n            emojiPickerActor.send({type: 'select'})\n          }),\n          execute({\n            type: 'delete.text',\n            at: {\n              anchor: {\n                path: params.focusBlock.path,\n                offset: params.textBeforeLength - params.emojiStringLength,\n              },\n              focus: {\n                path: params.focusBlock.path,\n                offset: params.textBeforeLength,\n              },\n            },\n          }),\n          execute({\n            type: 'insert.text',\n            text: params.emoji,\n          }),\n        ],\n      ],\n    }),\n    defineBehavior({\n      on: 'keyboard.keydown',\n      guard: ({snapshot, event}) => {\n        const matches = emojiPickerActor.getSnapshot().context.matches\n\n        if (matches.length === 0) {\n          return false\n        }\n\n        const isEscape = isHotkey('Escape', event.originEvent)\n\n        if (isEscape) {\n          return {action: 'reset' as const}\n        }\n\n        const isEnter = isHotkey('Enter', event.originEvent)\n        const isTab = isHotkey('Tab', event.originEvent)\n\n        if (isEnter || isTab) {\n          const selectedIndex =\n            emojiPickerActor.getSnapshot().context.selectedIndex\n\n          const emoji = matches[selectedIndex]\n            ? config.parseMatch({match: matches[selectedIndex]})\n            : undefined\n\n          if (!emoji) {\n            return false\n          }\n\n          const focusBlock = selectors.getFocusTextBlock(snapshot)\n          const textBefore = selectors.getBlockTextBefore(snapshot)\n          const emojiKeyword = textBefore.match(incompleteEmojiRegEx)?.[1]\n\n          if (!focusBlock || emojiKeyword === undefined) {\n            return false\n          }\n\n          const emojiStringLength = emojiKeyword.length + 1\n\n          if (emoji) {\n            return {\n              action: 'select' as const,\n              focusBlock,\n              emoji,\n              emojiStringLength,\n              textBeforeLength: textBefore.length,\n            }\n          }\n\n          return false\n        }\n\n        const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n        const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n        if (isArrowDown && matches.length > 0) {\n          return {action: 'navigate down' as const}\n        }\n\n        if (isArrowUp && matches.length > 0) {\n          return {action: 'navigate up' as const}\n        }\n\n        return false\n      },\n      actions: [\n        (_, params) => {\n          if (params.action === 'select') {\n            return [\n              effect(() => {\n                emojiPickerActor.send({type: 'select'})\n              }),\n              execute({\n                type: 'delete.text',\n                at: {\n                  anchor: {\n                    path: params.focusBlock.path,\n                    offset: params.textBeforeLength - params.emojiStringLength,\n                  },\n                  focus: {\n                    path: params.focusBlock.path,\n                    offset: params.textBeforeLength,\n                  },\n                },\n              }),\n              execute({\n                type: 'insert.text',\n                text: params.emoji,\n              }),\n            ]\n          }\n\n          if (params.action === 'navigate up') {\n            return [\n              // If we are navigating then we want to hijack the key event and\n              // turn it into a noop.\n              noop(),\n              effect(() => {\n                emojiPickerActor.send({type: 'navigate up'})\n              }),\n            ]\n          }\n\n          if (params.action === 'navigate down') {\n            return [\n              // If we are navigating then we want to hijack the key event and\n              // turn it into a noop.\n              noop(),\n              effect(() => {\n                emojiPickerActor.send({type: 'navigate down'})\n              }),\n            ]\n          }\n\n          return [\n            effect(() => {\n              emojiPickerActor.send({type: 'reset'})\n            }),\n          ]\n        },\n      ],\n    }),\n    defineBehavior({\n      on: 'delete.backward',\n      guard: ({snapshot, event}) => {\n        if (event.unit !== 'character') {\n          return false\n        }\n\n        const matches = emojiPickerActor.getSnapshot().context.matches\n\n        if (matches.length === 0) {\n          return false\n        }\n\n        const focusBlock = selectors.getFocusTextBlock(snapshot)\n        const textBefore = selectors.getBlockTextBefore(snapshot)\n        const emojiKeyword = textBefore\n          .slice(0, textBefore.length - 1)\n          .match(incompleteEmojiRegEx)?.[1]\n\n        if (!focusBlock || emojiKeyword === undefined) {\n          return {emojis: []}\n        }\n\n        const emojis = config.matchEmojis({keyword: emojiKeyword})\n\n        return {emojis}\n      },\n      actions: [\n        (_, params) => [\n          {\n            type: 'effect',\n            effect: () => {\n              emojiPickerActor.send({\n                type: 'emojis found',\n                matches: params.emojis,\n              })\n            },\n          },\n        ],\n      ],\n    }),\n  ]\n}\n\nfunction createEmojiPickerMachine<TEmojiSearchResult>() {\n  return setup({\n    types: {\n      context: {} as {\n        matches: Array<TEmojiSearchResult>\n        selectedIndex: number\n      },\n      events: {} as\n        | {\n            type: 'emojis found'\n            matches: Array<TEmojiSearchResult>\n          }\n        | {\n            type: 'navigate down' | 'navigate up' | 'select' | 'reset'\n          },\n    },\n    actions: {\n      'assign matches': assign({\n        matches: ({event}) => {\n          assertEvent(event, 'emojis found')\n          return event.matches\n        },\n      }),\n      'reset matches': assign({\n        matches: [],\n      }),\n      'reset selected index': assign({\n        selectedIndex: 0,\n      }),\n      'increment selected index': assign({\n        selectedIndex: ({context}) => {\n          if (context.selectedIndex === context.matches.length - 1) {\n            return 0\n          }\n          return context.selectedIndex + 1\n        },\n      }),\n      'decrement selected index': assign({\n        selectedIndex: ({context}) => {\n          if (context.selectedIndex === 0) {\n            return context.matches.length - 1\n          }\n          return context.selectedIndex - 1\n        },\n      }),\n    },\n    guards: {\n      'no matches': ({context}) => context.matches.length === 0,\n    },\n  }).createMachine({\n    id: 'emoji picker',\n    context: {\n      matches: [],\n      selectedIndex: 0,\n    },\n    initial: 'idle',\n    states: {\n      'idle': {\n        on: {\n          'emojis found': {\n            actions: 'assign matches',\n            target: 'showing matches',\n          },\n        },\n      },\n      'showing matches': {\n        always: {\n          guard: 'no matches',\n          target: 'idle',\n        },\n        exit: ['reset selected index'],\n        on: {\n          'emojis found': {\n            actions: 'assign matches',\n          },\n          'navigate down': {\n            actions: 'increment selected index',\n          },\n          'navigate up': {\n            actions: 'decrement selected index',\n          },\n          'reset': {\n            target: 'idle',\n            actions: ['reset selected index', 'reset matches'],\n          },\n          'select': {\n            target: 'idle',\n            actions: ['reset selected index', 'reset matches'],\n          },\n        },\n      },\n    },\n  })\n}\n","export function looksLikeUrl(text: string) {\n  let looksLikeUrl = false\n  try {\n    const url = new URL(text)\n\n    if (!sensibleProtocols.includes(url.protocol)) {\n      return false\n    }\n\n    looksLikeUrl = true\n  } catch {}\n  return looksLikeUrl\n}\n\nconst sensibleProtocols = ['http:', 'https:', 'mailto:', 'tel:']\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {looksLikeUrl} from '../internal-utils/looks-like-url'\nimport * as selectors from '../selectors'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * @beta\n */\nexport type LinkBehaviorsConfig = {\n  linkAnnotation?: (context: {\n    schema: EditorSchema\n    url: string\n  }) => {name: string; value: {[prop: string]: unknown}} | undefined\n}\n\n/**\n * @beta\n */\nexport function createLinkBehaviors(config: LinkBehaviorsConfig) {\n  const pasteLinkOnSelection = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const url = looksLikeUrl(text) ? text : undefined\n      const annotation =\n        url !== undefined\n          ? config.linkAnnotation?.({url, schema: snapshot.context.schema})\n          : undefined\n\n      if (annotation && !selectionCollapsed) {\n        return {annotation}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {annotation}) => [\n        execute({\n          type: 'annotation.add',\n          annotation,\n        }),\n      ],\n    ],\n  })\n  const pasteLinkAtCaret = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!focusSpan || !selectionCollapsed) {\n        return false\n      }\n\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const url = looksLikeUrl(text) ? text : undefined\n      const annotation =\n        url !== undefined\n          ? config.linkAnnotation?.({url, schema: snapshot.context.schema})\n          : undefined\n\n      if (url && annotation && selectionCollapsed) {\n        return {focusSpan, annotation, url}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {annotation, url}) => [\n        execute({\n          type: 'insert.span',\n          text: url,\n          annotations: [annotation],\n        }),\n      ],\n    ],\n  })\n\n  const linkBehaviors = [pasteLinkOnSelection, pasteLinkAtCaret]\n\n  return linkBehaviors\n}\n"],"names":["createCodeEditorBehaviors","config","defineBehavior","on","guard","snapshot","event","isMoveUpShortcut","isHotkey","moveBlockUpShortcut","originEvent","firstBlock","selectors","getFirstBlock","selectedBlocks","blocksAbove","node","_key","paths","map","block","path","actions","_","at","raise","type","isMoveDownShortcut","moveBlockDownShortcut","lastBlock","blocksBelow","length","reverse","emojiCharRegEx","incompleteEmojiRegEx","emojiRegEx","createEmojiPickerBehaviors","emojiPickerActor","createActor","createEmojiPickerMachine","start","subscribe","state","onMatchesChanged","matches","context","onSelectedIndexChanged","selectedIndex","text","test","emojis","focusBlock","emojiKeyword","match","undefined","matchEmojis","keyword","params","effect","send","getSnapshot","emoji","parseMatch","textBefore","emojiStringLength","textBeforeLength","execute","anchor","offset","focus","action","isEnter","isTab","isArrowDown","isArrowUp","noop","unit","slice","setup","types","events","assign","assertEvent","guards","no matches","createMachine","id","initial","states","target","always","exit","looksLikeUrl","url","URL","sensibleProtocols","includes","protocol","createLinkBehaviors","pasteLinkOnSelection","selectionCollapsed","dataTransfer","getData","annotation","linkAnnotation","schema","pasteLinkAtCaret","focusSpan","annotations"],"mappings":"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"}